<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端教學 on 米米的部落格</title>
    <link>https://jameshsu0407.github.io/categories/%E5%89%8D%E7%AB%AF%E6%95%99%E5%AD%B8/</link>
    <description>Recent content in 前端教學 on 米米的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Mon, 18 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jameshsu0407.github.io/categories/%E5%89%8D%E7%AB%AF%E6%95%99%E5%AD%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[教學]undefined與null的比較</title>
      <link>https://jameshsu0407.github.io/blog/20211019_undefined_null/</link>
      <pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20211019_undefined_null/</guid>
      <description>前言 今天繼續來打底練基礎～本次要來聊聊undefined、not defined、null，這些看起來就像「沒有」一樣，實際上他們之間可是差很多的哩！有些在時候會相等，有些時候又不一樣，那就跟著腳步一起看下去吧～～
 目錄：
 使用型態比較 truthy與falsy 使用一般相等與嚴格相等比較 使用數字運算比較 undefined與not defined的差別 undefined居然可以當作變數名稱或參數使用   使用型態比較 在寫JS時有兩大型別，分別是基本型別（Primitives）與物件型別（Object）。
 基本型別： string、number、boolean、null、undefined、symbol 物件型別：array、object、function&amp;hellip;&amp;hellip;  在這裡可以觀察到本次要探討的null、undefined均出現在基本型別中。而基本型別裡都有「原始值 (primitive value)」，原始值是無法經過更改的的，例如布林值只有truth、false，不會再有其他的值，因此null、undefined也是一樣，null 型別只有一種值，就是 null ，而 undefined 類型也只有一種值，就是 undefined。
我們透過程式碼來更進一步了解兩者之間的差異，首先分別給他們型別：
let a; let b = null; console.log(a) // 顯示：undefined，表示尚未賦值，未定義 console.log(b) // 顯示：null，表示此變數沒有值 undefined代表根本沒有這個東西，所以不知道這是什麼；null代表此變數（可能曾經有值，可能沒有值）現在沒有值。
接著再用typeof來檢驗型別是不是undefined跟null:
let a; let b = null; console.log(typeof a) // 顯示：undefined console.log(typeof b) // 顯示：object 可以知道undefined 的型別是 undefined，null的型別是object。
 誒，不是誒！剛剛不是說null 型別只有一種值，就是 null ？怎麼變成object？說變就變，不講武德誒！！！
 既然有問題我們就去找找，從官方文件MDN Web Docs有說：</description>
    </item>
    
    <item>
      <title>[教學]var、let、const之間的比較</title>
      <link>https://jameshsu0407.github.io/blog/20211013_var_let_const/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20211013_var_let_const/</guid>
      <description>前言 重新開始學習JS我才發現有很多小細節是需要好好打底的，所以我去報名了六角學院的Javascript工程師養成直播班從基礎開始學習，跟著老師的步調再加上每日作業、每週作業一定可以飛速成長的～
接下來幾次的更新會注重在JS上，因為就連寫文章也是學習JS的一環（雖然我不確定能不能跟得上老師的進度生產文章，全職學習真的沒那麼多時間Ｒ～～ 但我還是會努力跟上進度的！
本次探討的東西是非常基礎的宣告變數，但越是簡單的東西越要小心，魔鬼藏在細節中，你的程式碼出現bug很有可能就是因為變數使用錯誤的關係喔！今天就讓我們來了解var、let、const之間的差異吧～
 目錄：
 從ES5到ES6 變數的有效範圍 初始值（initializer） 作用域（scope） 重複賦值（reassigned） 重複宣告（redeclared） 變量提升（hoisting）   從ES5到ES6 什麼是ES5、ES6??
在了解這兩者之間的差異前，我們需要先來認識ECMAScript。ECMAScript提供腳本語言需要遵守的細節、規則以及規範，ECMAScript每年都會發布一次新的版本，而比較知名的版本就是第五版的ES5以及第六版的ES6。
 更詳細了解ECMAScript可以參考Day2 [JavaScript 基礎] 淺談 ECMAScript 與 JavaScript，裡面有詳細講解ECMAScript的歷史和制定流程。
 目前的瀏覽器普遍支援ES5、ES6，甚至支援更新的ES7，大家可以安心使用。這裡我列出從ES5更新到ES6的主要改動：
    ES5 ES6     類型 空值（null）、未定義（undefined）、布林值（boolean）、數字（number）、字串（string）、物件（object） 引入新的類型：符號（symbol）用來表示唯一值   變數 只能使用var來定義變數 新增let、const，能夠更嚴謹的定義變數   箭頭函數 使用function、return來定義函數內容 可用&amp;quot;=&amp;gt;&amp;ldquo;等符號代表function   迴圈 使用for迴圈、for in迴圈、forEach迴圈&amp;hellip; 新增for of迴圈    從上方表格可得知ES6是基於ES5上新增了部分的功能，而我們今天就先來探討變數的部分，其他的之後後再說（如果老師有出的話我就一定會更新 XDD~
變數的有效範圍 宣告變數的位置是會影響到他們的作用範圍，有效範圍主要分成「全域變數」、「區域變數」兩種：
 全域變數（Global Variable）：在函式外宣告的變數。整個程式中都可以被存取與修改。 區域變數（Local Variable）：在區塊內等被 { } 包起來的地方宣告的變數。此變數只能提供在所屬的function函式中執行，不提供給functionc函式以外呼叫使用，當function函式執行完後，記憶體只會保留其執行的結果，變數的部分則會被記憶體消除釋放掉。  var global_variable = &amp;#34;我是全域變數&amp;#34;; // 宣告全域變數 function show(){ var local_variable = &amp;#34;我是區域變數&amp;#34;; // 宣告區域變數  console.</description>
    </item>
    
    <item>
      <title>[教學]Grid</title>
      <link>https://jameshsu0407.github.io/blog/20210205_grid/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20210205_grid/</guid>
      <description>前言 grid是一個很好用的排版工具之一，他甚至比flex好用呢！兩者之間有相似也有不相似的地方，就讓我們繼續看下去吧！
grid的包法與flex一樣，需要有外層的.container，也需要有內層的.items，若不懂內外層之間的關係，可以去看看我之前寫的[教學]FLEXBOX。
照慣例，先來看看Container、Items的屬性有哪些：
 Container：
 Display Grid-template-columns_rows Grid-template-areas Grid-gap Justify-items Align-items  Items：
 Grid-column_row Justify-self Align-self   Container 跟flex一樣，grid大都是在container裡面下指令。
Display 先宣告要使用grid來排版。
&amp;lt;!-- css --&amp;gt; .container{ display: grid; } grid不像flex一下display就會有變化，它還需要把空間切成一塊一塊的才能使用，雖說有些麻煩，但事後在定位排版上會比較好操作，靈活度也比flex還要來得高。
Grid-template-columns_rows Template的意思為模板，我們透過這個屬性把想要的區塊切開。它的語法主要分兩個：
&amp;lt;!-- css --&amp;gt; grid-template-columns: 100px 50px auto 200px 1fr; &amp;lt;!-- 直行 --&amp;gt; grid-template-rows: 25% 100px 1fr; &amp;lt;!-- 橫列 --&amp;gt;   ＊給定的值可以使用px、%、fr等長度單位
我們從左至右看，可以發現每一格的寬度是「100px 50px auto 200px 1fr」，這不就跟css內的grid-template-column一樣嗎！它的意思是「切幾格，每格自己給定」，以剛剛的例子來說就是切五格，每格的長度按照裡面的值所定。同理grid-template-rows也是如此。
Grid-template-areas 這東西像是給定切好的區塊一個名字，之後在items叫它去該區塊。在Container裡先設好模版該長什麼樣、該叫什麼名字，每個格子裡要放哪個items。
&amp;lt;!-- css --&amp;gt; .container{ grid-template-areas: &amp;#34;header header header header&amp;#34; &amp;#34;main main .</description>
    </item>
    
    <item>
      <title>[教學]Gap</title>
      <link>https://jameshsu0407.github.io/blog/20201120_gap/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20201120_gap/</guid>
      <description>前言 在上一篇文章中講解了如何用flex排版，如果還沒看過的話請去看[教學]FLEXBOX再來看這篇文章喔。
各位在使用Flex時有沒有發生過Container裡面的items都會黏在一起、擠在一起的情況呢？這時我想大家的處理方式應該都是在items下外距來隔開吧！這次要介紹的就是超級方便的gap，他可以快速控制的items的之間的間隔喔！
GAP 它使用的方式非常簡單，只要在Container裡加上：
&amp;lt;!-- css --&amp;gt; .container{ gap: 20px; } 好，結束收工。
484很～～～～～～簡單。
 但是&amp;hellip;我用safari看完全沒有間隔R，東西還是黏在一起誒。為什麼會這樣子？
 我們可以去查一下gap語法的支援程度如何。
  gap的支援程度  恩&amp;hellip;滿江紅一片呢，這代表還有很多瀏覽器不支援，各位請加油好嗎？
在各瀏覽器普遍還沒支援的情況下，我們可以換一種寫法，讓沒有不支援的瀏覽器也能呈現出gap的樣式。
修改後的GAP 為了達到目的，我們必須從Container跟items下手。
&amp;lt;!-- css --&amp;gt; .container{ display: flex; flex-wrap: wrap; --gap: 20px; margin: calc(-1 * var(--gap)) 0 0 calc(-1 * var(--gap)); } .container &amp;gt; *{ margin: var(--gap) 0 0 var(--gap); } ＊--gap這個東西css裡面的變數，我們將想要的間隔寬度存在這裡，之後要改大小就只需在這裡處理就好。
它的原理很簡單，以items來說，彼此之間都要有距離，因此每個items都需要在「上方」及「左側」有外距，但如次一來在「上方第一橫排的items」跟「左側第一直排的items」就會跟Container產生間隔。
這時就換Container來處理問題。我們只需把Container「上方」及「左側」的外距再縮回來就能達到這個效果了。
 ＊2021/06/04更新：現在Safari也已經支援使用gap了，上面的東西大家看看就好。
結語 其實我比較希望各家瀏覽器能快快支援gap，但目前也只能先以修改外距來達到類似的效果。不過不用灰心，因為除了gap能控制間隔外，還有另一個也能控制間隔的語法，不過這並不在flex的範疇裡，而是在更方便的grid裡，之後會陸陸續續地放上來喔～</description>
    </item>
    
    <item>
      <title>[教學]Flexbox</title>
      <link>https://jameshsu0407.github.io/blog/20200925_flexbox/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20200925_flexbox/</guid>
      <description>前言 前端在切版時最最需要的就是排版，上篇文章就有偷偷使用display: flex來做排版，這次就讓我們來看看Flex到底有多麽強大！在了解Flex之前，我們需要知道它究竟是如何排版的。
 以中央伍為準～～成體操隊形～～散開！
 聽到這句口令，想必大家腦中已經浮現出排隊的隊形了吧！沒錯，這就是Flex的排版原理。想要叫人員乖乖排好就需要先限制場地，因此人員就只能在這個範圍活動，不會跑到外面去。而這個場地就是「外容器、Container、父元素」；而人員就是「內元件、items、子元素」，接下來大家就可以開始排排站好囉～～
  Container,Items  ＊接下來我會以「Container」、「Items」來說明他們的關係
首先來看看Container、Items各自有哪些屬性：
 Container：
 Display Flex-direction Flex-wrap Flex-flow Justify-content Align-items Align-content  Items：
 Order Flex-basis Flex-grow Flex-shrink Align-self   Container Flex主要都是在Container上下指令。
 發動場地魔法卡「大地力量」，場面上地屬性怪獸的攻擊力可以上升500&amp;hellip;
 沒錯，可以把它想像成場地效果，你要裡面的東西怎樣他就會怎樣，這樣就可以很好的控制裡面的內容了。以下介紹的屬性都是放在Container裡面的喔。
Display 首先先宣告為flex它才能使用。
&amp;lt;!-- css --&amp;gt; .container{ display: flex; } Flex-direction   flex-direction  Flex-direction負責管理Items該如何排列，它掌控著誰可以拿到主導權，能拿到主導權的有兩位人選，一位是column，另一位是row，也就是我們常講的「直行橫列」，直行是column；橫列是row。
所謂的主導權就是「主軸（main-axis）」，既然有主軸那就有「副軸（cross-axis）」。預設下主軸為row，而副軸為column。主副軸彼此的關係為「十字交叉」，若一方為主軸，則另一方就是副軸，但Flex-direction只有決定主軸是誰，副軸的功用等等再說吧。我們現來看Flex-direction，它有4個語法，分別是：
&amp;lt;!-- css --&amp;gt; flex-direction: row; /*預設，主軸由左至右*/ flex-direction: row-reverse; /*主軸由右至左*/ flex-direction: column; /*主軸由上至下*/ flex-direction: column-reverse; /*主軸由下至上*/   ＊因為瀏覽器對於每個語法的定義不同，因此在Chome上看到的flex-direction: column、flex-direction: column-reverse是會爆出框框的；而在Safari上看到的是塞好塞滿。不過兩者皆是把物件塞在同一排，即便有定義好Items的寬高，但在空間不夠時是會壓縮它們的喔！</description>
    </item>
    
    <item>
      <title>[教學]圖片自適應外框大小</title>
      <link>https://jameshsu0407.github.io/blog/20200914/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20200914/</guid>
      <description>前言 暑假一眨眼就過去了，回顧過去這兩個月來我也學到不少東西。七月主要改版台灣公益資訊中心的頁面，將網站改成RWD頁面並且新增一些功能。由於專案還在開發階段，因此無法公開頁面內容，請以舊版的台灣公益資訊中心做為參考。
接下來的分享主要以我在開發時遇到的困難、學習到的新東西為主。那我們就開始吧！
圖片自適應外框大小 標題取為「圖片自適應外框大小」我想一定有很多人看不懂這到底是什麼意思。簡單來說，會使用本平台的人數百百種，當他們在上架內容時若剛好有圖片，就會有以下情況：
 點擊上傳圖片 &amp;gt; 隨便丟一張覺得拍得不錯的照片 &amp;gt; 送出
 剛剛的順序看似再正常不過了，不過使用者有想過隨邊丟一張圖片這確定沒問題嗎？？
撇除照片檔案太大會影響載入速度外，另一個問題就是「照片的寬高比例」。現代人拍照通常都用手機，但是各家手機尺寸都不盡相同，若將未經裁切的照片丟上網頁，那一定會跑版&amp;hellip;
解法一：max-width: 100%, max-height: 100% 為了解決這個問題，我原本的想法是在圖片的外層包一層div，並且控制外層大小及照片的排列方式。若照片比例與外框比例不符，它就會等比例縮在外框裡。
&amp;lt;!-- html --&amp;gt; &amp;lt;div class=&amp;#34;pic&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://images.unsplash.com/photo-1600068643981-3c4496a2be55?ixlib=rb-1.2.1&amp;amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;amp;auto=format&amp;amp;amp;fit=crop&amp;amp;amp;w=2467&amp;amp;amp;q=80&amp;#34; alt=&amp;#34;&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;pic&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://images.unsplash.com/photo-1599930499224-1b9a45439a12?ixlib=rb-1.2.1&amp;amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;amp;auto=format&amp;amp;amp;fit=crop&amp;amp;amp;w=1164&amp;amp;amp;q=80&amp;#34; alt=&amp;#34;&amp;#34;/&amp;gt; &amp;lt;/div&amp;gt; ＊圖片的src=&amp;quot;...&amp;quot;是在圖片地址，你可以換張圖片試試
/* css */ html, body { width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; flex-wrap: wrap; background-color: #3d3d3d; } .pic { width: 500px; height: 350px; margin: 50px; display: flex; justify-content: center; align-items: center; border: 2px solid; } .</description>
    </item>
    
  </channel>
</rss>
