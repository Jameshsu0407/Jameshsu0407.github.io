[{
    "title": "[教學]Flexbox",
    "date": "",
    "description": "Flexbox就只是叫小朋友排好隊形而已",
    "body": "前言 前端在切版時最最需要的就是排版，上篇文章就有偷偷使用display: flex來做排版，這次就讓我們來看看Flex到底有多麽強大！在了解Flex之前，我們需要知道它究竟是如何排版的。\n 以中央伍為準～～成體操隊形～～散開！\n 聽到這句口令，想必大家腦中已經浮現出排隊的隊形了吧！沒錯，這就是Flex的排版原理。想要叫人員乖乖排好就需要先限制場地，因此人員就只能在這個範圍活動，不會跑到外面去。而這個場地就是「外容器、Container、父元素」；而人員就是「內元件、items、子元素」，接下來大家就可以開始排排站好囉～～\n  Container,Items  ＊接下來我會以「Container」、「Items」來說明他們的關係\n首先來看看Container、Items各自有哪些屬性：\n Container：\n Display Flex-direction Flex-wrap Flex-flow Justify-content Align-items Align-content  Items：\n Order Flex-basis Flex-grow Flex-shrink Align-self   Container Flex主要都是在Container上下指令。\n 發動場地魔法卡「大地力量」，場面上地屬性怪獸的攻擊力可以上升500\u0026hellip;\n 沒錯，可以把它想像成場地效果，你要裡面的東西怎樣他就會怎樣，這樣就可以很好的控制裡面的內容了。以下介紹的屬性都是放在Container裡面的喔。\nDisplay 首先先宣告為flex它才能使用。\n\u0026lt;!-- css --\u0026gt; .container{ display: flex; } Flex-direction   flex-direction  Flex-direction負責管理Items該如何排列，它掌控著誰可以拿到主導權，能拿到主導權的有兩位人選，一位是column，另一位是row，也就是我們常講的「直行橫列」，直行是column；橫列是row。\n所謂的主導權就是「主軸（main-axis）」，既然有主軸那就有「副軸（cross-axis）」。預設下主軸為row，而副軸為column。主副軸彼此的關係為「十字交叉」，若一方為主軸，則另一方就是副軸，但Flex-direction只有決定主軸是誰，副軸的功用等等再說吧。我們現來看Flex-direction，它有4個語法，分別是：\n\u0026lt;!-- css --\u0026gt; flex-direction: row; /*預設，主軸由左至右*/ flex-direction: row-reverse; /*主軸由右至左*/ flex-direction: column; /*主軸由上至下*/ flex-direction: column-reverse; /*主軸由下至上*/   ＊因為瀏覽器對於每個語法的定義不同，因此在Chome上看到的flex-direction: column、flex-direction: column-reverse是會爆出框框的；而在Safari上看到的是塞好塞滿。不過兩者皆是把物件塞在同一排，即便有定義好Items的寬高，但在空間不夠時是會壓縮它們的喔！\n 咦咦咦！？我不要裡面的東西變形啦！！該怎麼解決呢？有兩個方法，第一個是減少Items，這樣空間就留出來了；第二個是加大Container的寬高。\n 但～～上面講的都治標不治本，接下來就來介紹解決方案吧！\nFlex-wrap   flex-direction  Flex-wrap決定了Items的排列方式，有別於前者說提到的Flex-direction，它控制物件該不該「包起來」。我們知道單就下Flex-direction只會讓items排一排站好，而且還有可能擠在一起，讓Items變形，因此Flex-wrap透過包起來的方式，將塞不下的Items換行繼續塞，而換行的方向就是根據副軸去排的喔。說了這麼多我們直接看看它到底有哪些功能：\n\u0026lt;!-- css --\u0026gt; flex-wrap: nowrap; /*預設，單行排列，不包起來*/ flex-wrap: wrap; /*包好包滿*/ flex-wrap: wrap-reverse; /*包好包滿外還要來個反轉*/   ＊Codepen展示中用到Flex-direction: row，其餘的排列組合就請自己去玩玩探索吧！\n＊Flex-wrap: reverse，反轉的地方是指「副軸反轉」，正常的方向是由左至右，由上至下，而反轉後的方向則變成了由右至左，由下至上\nFlex-flow 那麼這個屬性又是幹嘛的呢？？其實你也可以不用懂它，它就是Flex-direction、Flex-wrap的「組合技」，如此一來就可以共同定義主副軸的排列方式了。\n\u0026lt;!-- css --\u0026gt; flex-flow: flex-direction flex-wrap; /*大括號裡面放的就是它們各自的屬性*/ ＊預設為flex-flow: row nowrap\n接下來就進入重頭戲，也就是介紹Flex屬性是如何「排版」的吧！\nJustify-content   justify-content  Justify-content定義了「主軸」的「對齊方式」，有以下5種方式：\n\u0026lt;!-- css --\u0026gt; justify-content: flex-start; /*預設，靠頭對齊*/ justify-content: flex-end; /*靠尾對齊*/ justify-content: center; /*置中對齊*/ justify-content: space-between; /*置中對齊，頭尾的items貼齊Container，items之間有固定距離*/ justify-content: space-around; /*置中對齊，頭尾的items沒有貼齊Container，items之間、頭尾items跟Container之間皆有固定距離*/ justify-content: space-evenly; /*置中對齊，頭尾的items沒有貼齊Container，items之間、頭尾items跟Container之間距離相同*/   ＊Codepen展示中用到Flex-flow: row wrap，其餘的排列組合就請自己去玩玩探索吧！\n＊Justify-content是「控制主軸」，不是「控制左右」。在Flex-direction的控制下是有可能把主軸變為直向，副軸變為橫向。因此註解上我不以「靠左對齊」、「靠右對齊」而改用頭尾，原因是彼此的關係是互相的\n＊Justify-content:space-arounnd與Justify-content:space-evenly意思其實不太一樣喔。舉例來說每個items距離20px，那麼前者代表每個items都有20px，彼此的距離是40px；反觀後者，是每個items彼此之間的距離是20px\nAlign-items   align-items  Align-items定義了「副軸」的「對其方式」，有以下5種方式：\n\u0026lt;!-- css --\u0026gt; align-items: flex-start; /*預設，靠頭對齊*/ align-items: flex-end; /*靠尾對齊*/ align-items: center; /*置中對齊*/ align-items: baseline; /*按照文本基線對齊*/ align-items: stretch; /*items延展至Container的頭尾*/   ＊Codepen展示中用到Flex-flow: row wrap、Justify-content: center，其餘的排列組合就請自己去玩玩探索吧！\n＊使用stretch時，請不要設死Items的高度喔，不然它會拉不開\nAlign-content   align-content  這個屬性是Align-items的進階版，而且它跟Justify-content長得有八成像，所以他們能控制的東西也是一樣差不多～這裡再再提醒一次：Justify-content控制主軸；Align-content控制副軸喔。\n\u0026lt;!-- css --\u0026gt; align-content: flex-start; /*預設，靠頭對齊*/ align-content: flex-end; /*靠尾對齊*/ align-content: center; /*置中對齊*/ align-content: space-between; /*置中對齊，頭尾的items貼齊Container，items之間有固定距離*/ align-content: space-around; /*置中對齊，頭尾的items沒有貼齊Container，items之間、頭尾items跟Container之間皆有固定距離*/ align-content: stretch; /*items延展至Container的頭尾*/   ＊Codepen展示中用到Flex-flow: row wrap、Justify-content: center，其餘的排列組合就請自己去玩玩探索吧！\n＊使用stretch時，請不要設死Items的高度喔，不然它會拉不開\n以上大致講完Container可以用的屬性了，那麼我們就，下面一位～～～～\nItems Items也是有很多東西可以控制的，它能做到的事情主要是items跟items之間的關係，像是誰在前誰在後的order，又或是誰位置可以比較大誰位置可以比較小的Flex-grow跟Flex-shrink等等。有些屬性甚至能覆蓋掉Container的屬性呢，那就讓我們繼續看下去。\nOrder   order  order屬性可以控制誰在前誰在後，即使在HTML上的物件是在最後一個，只要下達這個指令就可以輕輕鬆鬆要它在哪它就在哪囉。\n\u0026lt;!-- css --\u0026gt; order: integer; /*預設為0，integer的地方是給整數*/   ＊Codepen展示中用到Flex-flow: row wrap、Justify-content: center、Align-content: space-around，其餘的排列組合就請自己去玩玩探索吧！\n＊order預設為零，若要排在0前面的話也可以負值喔\nFlex-basis 它決定了主軸上items的預設長度。以row當主軸來說它控制items的「寬度」；以column當主軸來說它控制items的「高度」\n\u0026lt;!-- css --\u0026gt; flex-basis: auto; /*預設為auto，可以給長度各種單位*/   ＊範例當中Flex-basis的長度為50px。以row來當主軸的話所有items的「寬度」皆為50px；反之以column當主軸的話所有items的「高度」皆為50px\nFlex-grow   flex-grow  這個屬性跟等一下講的屬性是相關的，可以將他們視為兄弟。Flex-grow屬性決定items如何分配剩餘空間。我們上範例會比較好理解：\n 第一個範例當中有三個items排在一起，彼此大小皆為100x100px。第二個範例只是都讓他們有flex-grow: 1的屬性，items就將Container撐好撐滿。\nflex-grow的預設值為0，也可以給其他的值，這個值代表要將剩下的空間分成幾等分。以這題為例，Container：600x350px；box：100x100px，那麼剩餘的空間就是600-(100*3)=300，因此就要來瓜分剩餘的300。items有三個，每個都有flex-grow: 1，因此切為三等份，每等分的長度則為300/3=100，所以每個items都會獲得100px的長度。\n那我們試著想一下，假設box1的flex-grow: 2，box2的flex-grow: 3那會變成怎麼樣呢？\n剩餘空間300要分給5等分，每等分為60，其中box1占2等分所以是120，而box2占3等分所以是180。最終items的長度分別為：220px、280px、100px（若把codepen上的範例改成這題，他們的實際大小可能會有一點點的落差，因為items都有border，border的長度也是會被算在裡面的。）\nFlex-shrink 剛剛的Flex-grow是處理當Container有剩餘空間時，將items「伸展」來符合Container的長度；現在Flex-shrink則是處理當Container不夠items塞時，將items「縮小」來符合Container的長度。\n 在第一個範例裡Container的大小是600x350px，每個items的長度皆為300px，照理來講items的長度比Container還要長，那為什麼它們沒有爆開呢？答案是在預設裡其實就已經加上了Flex-shrink:1了～因此它們都會被包在Container裡面。我們可以來算算實際上items到底多長，3個items總長度為3*300=900，扣掉Container的600，因此差為300。而各自的Flex-shrink皆為1，故300/3=100，每個items的長度都要減去100，所以長度為200。第二範例就只是把Flex-shrink設為0，items總長大於Container，那麼就會爆開了。\n再來看看第三個範例，長寬依舊，但是Flex-shrink分別是2、3、1，故300/(2+3+1)=50。box1占了2份，300-(2＊50)=200；box2占了3份，300-(3＊50)=150；box3占了1份，300-(1＊50)=250。這樣各位有清楚了嗎～\nAlign-self   align-self  終終終於來到最後一個屬性了啊！！！！（撒花～\n這個屬性可以調整「副軸」的對齊屬性，再重申一次，是「副軸」喔不是主軸。它與Align-items、Align-content一樣可以控制副軸的排列方式，它卻能更進一步個別調整單一item的排列方式，以下是它的語法：\n\u0026lt;!-- css --\u0026gt; align-self: auto; /*預設，與Container的align-items一樣*/ align-self: flex-start; /*預設，靠頭對齊*/ align-self: flex-end; /*靠尾對齊*/ align-self: center; /*置中對齊*/ align-self: baseline; /*按照文本基線對齊*/ align-self: stretch; /*items延展至Container的頭尾*/   ＊特別注意！Align-self給定的值是會壓過Align-items、Align-content的喔\n結語 其實Flex並沒有想象中的那麼難，我當初在學習時也是看到一大堆屬性就頭昏腦花了，但只要先了解Container與items各自是負責做什麼的，以及主軸和副軸之間的關係，其他的即便忘了，網路上找一下就知道該怎麼使用了。前端的路途是很遙遠的，我們共勉之～\n 參考資料：\n圖解：CSS Flex 屬性一點也不難\nCSS | 所以我說那個版能不能好切一點？ - Flex 基本用法\n[css] 搞懂 flex-grow, flex-shirk 及 flex-basis 三種屬性\nCSS Flexbox\n圖片來源：\nA Complete Guide to Flexbox\n",
    "ref": "/blog/20200925_flexbox/"
  },{
    "title": "Fasure",
    "date": "",
    "description": "虛擬電商實作",
    "body": "這是我第一個電商網站，主要使用Bootstrap來切版。\n這網站算是我自學Bootstrap後所做出來的成果，當時我還不太懂Bootstrap是什麼，對於框架的概念不甚了解，於是我就上網自學。後來找到一本書專門介紹Bootstrap如何使用，於是我就跟著他的步驟，一點一點慢慢學習。\n 書名：讓響應式(RWD)網頁設計變簡單：Bootstrap開發速成\n作者：呂國泰\n 回到專案，當初在建置網頁時都是用Bootstrap，就連顏色配置這些也都是用Bootstrap內建顏色，因此版型看起來非常中規中矩，不過對於初學者來說這應該算及格了吧？\n但也多虧這個專案讓我能夠更加深入了解Bootstrap的用法，如grid system、card、collapsed等，這些東西需要經過反覆實作才能夠熟悉，不然很快就會忘記了。此外我也有用一些套件來讓版面看起來不這麼單調，如fontawesome的icon、AOS.js的下滑動畫等，這讓我之後懂得使用套件，提升網頁的多變性。\n附上網站連結\n",
    "ref": "/portfolio/fasure/"
  },{
    "title": "[教學]圖片自適應外框大小",
    "date": "",
    "description": "台灣公益資訊中心改版實作心得",
    "body": "前言 暑假一眨眼就過去了，回顧過去這兩個月來我也學到不少東西。七月主要改版台灣公益資訊中心的頁面，將網站改成RWD頁面並且新增一些功能。由於專案還在開發階段，因此無法公開頁面內容，請以舊版的台灣公益資訊中心做為參考。\n接下來的分享主要以我在開發時遇到的困難、學習到的新東西為主。那我們就開始吧！\n圖片自適應外框大小 標題取為「圖片自適應外框大小」我想一定有很多人看不懂這到底是什麼意思。簡單來說，會使用本平台的人數百百種，當他們在上架內容時若剛好有圖片，就會有以下情況：\n 點擊上傳圖片 \u0026gt; 隨便丟一張覺得拍得不錯的照片 \u0026gt; 送出\n 剛剛的順序看似再正常不過了，不過使用者有想過隨邊丟一張圖片這確定沒問題嗎？？\n撇除照片檔案太大會影響載入速度外，另一個問題就是「照片的寬高比例」。現代人拍照通常都用手機，但是各家手機尺寸都不盡相同，若將未經裁切的照片丟上網頁，那一定會跑版\u0026hellip;\n解法一：max-width: 100%, max-height: 100% 為了解決這個問題，我原本的想法是在圖片的外層包一層div，並且控制外層大小及照片的排列方式。若照片比例與外框比例不符，它就會等比例縮在外框裡。\n\u0026lt;!-- html --\u0026gt; \u0026lt;div class=\u0026#34;pic\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://images.unsplash.com/photo-1600068643981-3c4496a2be55?ixlib=rb-1.2.1\u0026amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9\u0026amp;amp;auto=format\u0026amp;amp;fit=crop\u0026amp;amp;w=2467\u0026amp;amp;q=80\u0026#34; alt=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pic\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://images.unsplash.com/photo-1599930499224-1b9a45439a12?ixlib=rb-1.2.1\u0026amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9\u0026amp;amp;auto=format\u0026amp;amp;fit=crop\u0026amp;amp;w=1164\u0026amp;amp;q=80\u0026#34; alt=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; ＊圖片的src=\u0026quot;...\u0026quot;是在圖片地址，你可以換張圖片試試\n/* css */ html, body { width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; flex-wrap: wrap; background-color: #3d3d3d; } .pic { width: 500px; height: 350px; margin: 50px; display: flex; justify-content: center; align-items: center; border: 2px solid; } .pic img { max-width: 100%; max-height: 100%; } ＊html、body是為了排版用\n＊主要看.pic跟.pic img那邊，外層先固定好大小，並使用flex排版，讓裡面的內容能夠水平置中及垂直置中；內層的圖片分別在最大寬度、最大高度指定為100%，意思為寬高最大就是100%，若圖片的寬度大於高度，則寬度就是100%，而高度就依照比例去計算，反之亦然\n 解法二：object-fit 後來發現另一個更厲害的css內建語法，他叫做object-fit，若要以我剛剛的範例來說，它的語法就是object-fit: contain。\n\u0026lt;!-- html --\u0026gt; \u0026lt;div class=\u0026#34;pic\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://images.unsplash.com/photo-1600068643981-3c4496a2be55?ixlib=rb-1.2.1\u0026amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9\u0026amp;amp;auto=format\u0026amp;amp;fit=crop\u0026amp;amp;w=2467\u0026amp;amp;q=80\u0026#34; alt=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;pic\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;https://images.unsplash.com/photo-1599930499224-1b9a45439a12?ixlib=rb-1.2.1\u0026amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9\u0026amp;amp;auto=format\u0026amp;amp;fit=crop\u0026amp;amp;w=1164\u0026amp;amp;q=80\u0026#34; alt=\u0026#34;\u0026#34;/\u0026gt; \u0026lt;/div\u0026gt; /* css */ html, body { width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; flex-wrap: wrap; background-color: #3d3d3d; } .pic { width: 500px; height: 350px; margin: 50px; border: 2px solid; } .pic img { object-fit: contain; width: 500px; height: 350px; } ＊使用object-fit就只要在圖片上加上語法，並且列出想要的寬高就可以了\n 眼尖的人可能會發現，它的語法大致跟background-size一樣，所以它同樣有好幾種顯示方式：\n fill：為預設值，強制讓圖片變形成外框的寬高。（很醜誒哈哈哈哈 contain：按照圖片等比例縮放塞入外框內。 cover：填滿外框，超出外框的部分會被裁切掉。 none：不做任何調整。（請問我要用你幹嘛？？ scale-down：取決於圖片與外框的大小。若外框小於圖片就用contain；若外框大於圖片就用none。  另外他還有個好朋友叫做object-position，可以理解為圖片在外框中的擺放位置，預設是在正中間。他們兩個可以互相搭配使用，說不定能擦出什麼火花（？？\n  object-fit、object-position瀏覽器支援程度  BTW，剛剛講的object-fit、object-position並不支援IE喔，不過現在應該很少人在用IE了吧！\n結語 其實還有很多種方式可以達成圖片自適應外框大小，若你有新的作法與想法，歡迎在下方留言喔！\n",
    "ref": "/blog/20200914/"
  },{
    "title": "About",
    "date": "",
    "description": "自我介紹內容～",
    "body": "你好，我是米米，目前是一位學生同時也在一家軟體公司當前端工程實習生。\n因緣際會下接觸到前端工程，因此開始了我的前端人生。在這裡我會分享我的所見所聞，主要以工作上學習到的心得為主。有任何問題都歡迎來跟我討論喔！\n",
    "ref": "/about/"
  }]
