<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>if else on 米米的部落格</title>
    <link>https://jameshsu0407.github.io/tags/if-else/</link>
    <description>Recent content in if else on 米米的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sat, 23 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jameshsu0407.github.io/tags/if-else/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[教學]if else與switch case的比較</title>
      <link>https://jameshsu0407.github.io/blog/20211023_if-else_switch-case/</link>
      <pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20211023_if-else_switch-case/</guid>
      <description>前言 在寫程式的時候如果要判斷東西，你第一個想到的是什麼語法？？我想絕大多數的人都會選擇用if else吧！因為我也是一樣～ 不過其實還有另一位弟兄可以寫判斷式，它就是最近剛發表的Switch啦！！！！！！（最近才剛收了一台二手switch，每次下班後都想拿起來玩，不想寫文章&amp;hellip;&amp;hellip;. 咳咳！扯遠了。這個switch case也能寫判斷式，所以這次就來比較看看兩者間的差異～
 目錄：
 語法差異 可讀性 嚴謹度 效能 使用時機   語法差異  if else：當條件成立的時候會執行其陳述式裡的程式，而不成立時則執行另外一個陳述式。 switch case：括號內放入表達式，接著就會表達式裡的值是否符合case條件，然後再執行此條件相關的陳述式。   從上面的程式碼可知，if else是將整個要判斷的內容放在條件式，其條件式是使用布林值作為判斷基礎，並且可以搭配邏輯運算子使用，例如：if ( a &amp;lt; 10 &amp;amp;&amp;amp; a &amp;gt;= 5)，這裡就代表如果變數a的值介於5~10之間，程式就會執行該區塊的內容；switch case的判斷方式則不同，它是將表達式的值與case裡的值做比較，其條件判斷是分佈在「表達式」與「case」裡。
這裡特別講一下switch case也能夠做到區間判斷，就像if else語法一樣，但又不太一樣。
讓我們看看傳統的if else是如何判斷區間：
 接著使用switch case的寫法，如果將if else的寫法搬過來使用，答案會是&amp;hellip;
 什麼？為什麼會不及格？有哪邊出錯了嗎？其實這樣的判斷邏輯是對的，只是不了解switch case在比對的方法。
剛剛前面有提到switch case的判斷方式為：「將表達式的值與case去做比對」，以上面的程式碼為例，第一個比較的就「表達式的是score」與「case的score &amp;gt;= 90」是否相等，這裡是用布林值來做判斷true或false，所以程式其實是以77 !== true來做判斷。
由此可見，這樣的判斷寫法是錯誤的，因此程式就會繼續執行，最後因為所以條件都不符才會跑進default裡。
到這裡希望大家可以先停下腳步，想想看若要改程式碼的話，應該要如何調整呢？（提示：想想判斷條件及布林值的比較）
3&amp;hellip;
2&amp;hellip;
1&amp;hellip;答案揭曉：
 很簡單的，表達式帶入的值不需要是變數本身，只需寫true即可，亦即需要判斷的事情就交給case，表達式只需等同於它即可。
可讀性  if else：非常直覺，可套入人類的思考邏輯，如：「如果今天下雨，就要帶傘，沒有就不需要」，想到有什麼就寫什麼，之後若要再修改條件也是非常容易，因此很常被使用。 switch case：無法想到什麼就寫什麼，需要先仔細想想該如何應用。另外，在寫程式碼時還需注意加上break，程式才不會一直執行下去，假設判斷的東西變多，很有可能會有所遺漏。  這裡來看看若是沒加上break的話會有什麼結果：
 如果忘記加break，那麼程式會將所對應的case開始執行，然後持續執行之後的case，不論正確不正確。</description>
    </item>
    
  </channel>
</rss>
