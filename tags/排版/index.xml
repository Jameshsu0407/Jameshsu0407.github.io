<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>排版 on 米米的部落格</title>
    <link>https://jameshsu0407.github.io/tags/%E6%8E%92%E7%89%88/</link>
    <description>Recent content in 排版 on 米米的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Tue, 30 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jameshsu0407.github.io/tags/%E6%8E%92%E7%89%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[教學]圖片自適應外框大小2</title>
      <link>https://jameshsu0407.github.io/blog/20211130_aspect-ratio_object-fit/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20211130_aspect-ratio_object-fit/</guid>
      <description>前言 一年前我上傳了[教學]圖片自適應外框大小的教學文章，透過控制圖片的max-width: 100%, max-height: 100%以及使用object-fit來控制，那篇的流量還蠻高的，我想一定是大家都有圖片跑版的困擾吧，因此我決定再分享我最近發現好用的方法。
aspect-ratio 這次介紹另一個語法叫做aspect-ratio，看到ratio就可以猜出它可控制比例，它的語法如下：
 其中1/1的地方是可以任意設定的，假設需要圖片以16：9的方式呈現，其值設為16/9，需要4：3的比例，就設成4/3以此類推。
組合技：使用aspect-ratio加上object-fit 每個版面的圖片都有建議尺寸，客戶如若不按照建議尺寸亂上圖片，圖片就會大跑版，因此我們需要考量到這點，要將圖片限制在固定的區域。
常用的方式有兩種，一種是強制將圖片等比例塞進限制的空間，不符合建議尺寸的圖片就會留有白邊：另一種是將圖片放大後裁切超出的部分，但無法控制要裁切的中心，所以不適合放有文字的圖片。
我們先來看範例：
 object-fit可以很好的去控制圖片要contain或是cover，也就是做到前面剛剛講的兩種方式。
以前我們我們只單純用到object-fit來控制，但它缺乏寬高，因此需要指定給它，但這樣在不同的尺寸的裝置就需要設定好幾種，非常浪費時間。
因此我們使用aspect-ratio來控制圖片的比例，如此一來就不需要設定高度了，圖片會根據比例撐開。（本範例使用Bootstrap的欄位系統，每個欄位的寬度自然就被定下來了，因此就不需要設定寬高）。
最後需要給定圖片的寬度，也就是width: 100%。圖片剛剛講的去設定也有可能會符合比例但是卻太小，或者是太大直接炸開，因此要去控制圖片寬度為100%讓它撐滿。
主要的寫法整理成：
 結語 希望這個小方法可以幫助大家，當然它還是有一定的限制在的，像是有時在display: flex裡面它就會壞掉，或是需要一定程度上的給定寬度，但總體來說我認為還是不錯的方法，供大家參考。</description>
    </item>
    
    <item>
      <title>[教學]Grid</title>
      <link>https://jameshsu0407.github.io/blog/20210205_grid/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20210205_grid/</guid>
      <description>前言 grid是一個很好用的排版工具之一，他甚至比flex好用呢！兩者之間有相似也有不相似的地方，就讓我們繼續看下去吧！
grid的包法與flex一樣，需要有外層的.container，也需要有內層的.items，若不懂內外層之間的關係，可以去看看我之前寫的[教學]FLEXBOX。
照慣例，先來看看Container、Items的屬性有哪些：
 Container：
 Display Grid-template-columns_rows Grid-template-areas Grid-gap Justify-items Align-items  Items：
 Grid-column_row Justify-self Align-self   Container 跟flex一樣，grid大都是在container裡面下指令。
Display 先宣告要使用grid來排版。
 grid不像flex一下display就會有變化，它還需要把空間切成一塊一塊的才能使用，雖說有些麻煩，但事後在定位排版上會比較好操作，靈活度也比flex還要來得高。
Grid-template-columns_rows Template的意思為模板，我們透過這個屬性把想要的區塊切開。它的語法主要分兩個：
  ＊給定的值可以使用px、%、fr等長度單位
我們從左至右看，可以發現每一格的寬度是「100px 50px auto 200px 1fr」，這不就跟css內的grid-template-column一樣嗎！它的意思是「切幾格，每格自己給定」，以剛剛的例子來說就是切五格，每格的長度按照裡面的值所定。同理grid-template-rows也是如此。
Grid-template-areas 這東西像是給定切好的區塊一個名字，之後在items叫它去該區塊。在Container裡先設好模版該長什麼樣、該叫什麼名字，每個格子裡要放哪個items。
 上面的例子就是把Container切成4欄，第一列統一都是header；第二列main佔2欄，之後的為空白，最後一欄是sidebar；第三列皆為footer。而Items就分別帶入各自的名字。
 ＊空白的地方以&amp;quot;.&amp;ldquo;代替
Grid-gap 這個功能類似上次提到flex的gap，若不知道在講什麼的朋友可以先來看看[教學]GAP再來了解。
grid-gap好用的地方在於它的彈性更多，safari也能夠讀取。它有三種寫法，column-gap及row-gap分別控制行、列之間的間隙，而grid-gap是兩個我都要！一次控制行列的間隙。
 值得注意的是，這裡給定的值是會影響整個寬度的喔！舉例來說，grid-template-column: 50% 50%，如果我們加上column-gap: 50px，那麼寬度是會炸開的，因為他們的總和超過100%了。
所以我通常使用fr的單位，變成grid-template-colum: 1fr 1fr就不會有這個問題了。fr的概念可以想像成「將剩餘的空間按照比例去分配」，以grid-template-colum: 1fr 1fr為例，1+1=2，所以每一份間隔皆為1/2。
那麼依樣畫葫蘆，grid-template-colum: 1fr 2fr 3fr每一欄的寬度分別為1/6，2/6，3/6，是不是蠻簡單的～
Justify-items   justify-items  此功能與flex的justify-content類似，同樣是控制items水平靠左、置中、靠右。grid不用控制主軸與次軸，因此justify-content就是控制「水平」方向的排版。
  ＊使用stretch時，不可控制裡面的大小，不然會調不動
Align-items   align-items  這個功能就跟flex的align-items一模模一樣樣～直接輕鬆套用！</description>
    </item>
    
    <item>
      <title>[教學]Gap</title>
      <link>https://jameshsu0407.github.io/blog/20201120_gap/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20201120_gap/</guid>
      <description>前言 在上一篇文章中講解了如何用flex排版，如果還沒看過的話請去看[教學]FLEXBOX再來看這篇文章喔。
各位在使用Flex時有沒有發生過Container裡面的items都會黏在一起、擠在一起的情況呢？這時我想大家的處理方式應該都是在items下外距來隔開吧！這次要介紹的就是超級方便的gap，他可以快速控制的items的之間的間隔喔！
GAP 它使用的方式非常簡單，只要在Container裡加上：
 好，結束收工。
484很～～～～～～簡單。
 但是&amp;hellip;我用safari看完全沒有間隔R，東西還是黏在一起誒。為什麼會這樣子？
 我們可以去查一下gap語法的支援程度如何。
  gap的支援程度  恩&amp;hellip;滿江紅一片呢，這代表還有很多瀏覽器不支援，各位請加油好嗎？
在各瀏覽器普遍還沒支援的情況下，我們可以換一種寫法，讓沒有不支援的瀏覽器也能呈現出gap的樣式。
修改後的GAP 為了達到目的，我們必須從Container跟items下手。
 ＊--gap這個東西css裡面的變數，我們將想要的間隔寬度存在這裡，之後要改大小就只需在這裡處理就好。
它的原理很簡單，以items來說，彼此之間都要有距離，因此每個items都需要在「上方」及「左側」有外距，但如次一來在「上方第一橫排的items」跟「左側第一直排的items」就會跟Container產生間隔。
這時就換Container來處理問題。我們只需把Container「上方」及「左側」的外距再縮回來就能達到這個效果了。
 ＊2021/06/04更新：現在Safari也已經支援使用gap了，上面的東西大家看看就好。
結語 其實我比較希望各家瀏覽器能快快支援gap，但目前也只能先以修改外距來達到類似的效果。不過不用灰心，因為除了gap能控制間隔外，還有另一個也能控制間隔的語法，不過這並不在flex的範疇裡，而是在更方便的grid裡，之後會陸陸續續地放上來喔～</description>
    </item>
    
    <item>
      <title>[教學]Flexbox</title>
      <link>https://jameshsu0407.github.io/blog/20200925_flexbox/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20200925_flexbox/</guid>
      <description>前言 前端在切版時最最需要的就是排版，上篇文章就有偷偷使用display: flex來做排版，這次就讓我們來看看Flex到底有多麽強大！在了解Flex之前，我們需要知道它究竟是如何排版的。
 以中央伍為準～～成體操隊形～～散開！
 聽到這句口令，想必大家腦中已經浮現出排隊的隊形了吧！沒錯，這就是Flex的排版原理。想要叫人員乖乖排好就需要先限制場地，因此人員就只能在這個範圍活動，不會跑到外面去。而這個場地就是「外容器、Container、父元素」；而人員就是「內元件、items、子元素」，接下來大家就可以開始排排站好囉～～
  Container,Items  ＊接下來我會以「Container」、「Items」來說明他們的關係
首先來看看Container、Items各自有哪些屬性：
 Container：
 Display Flex-direction Flex-wrap Flex-flow Justify-content Align-items Align-content  Items：
 Order Flex-basis Flex-grow Flex-shrink Align-self   Container Flex主要都是在Container上下指令。
 發動場地魔法卡「大地力量」，場面上地屬性怪獸的攻擊力可以上升500&amp;hellip;
 沒錯，可以把它想像成場地效果，你要裡面的東西怎樣他就會怎樣，這樣就可以很好的控制裡面的內容了。以下介紹的屬性都是放在Container裡面的喔。
Display 首先先宣告為flex它才能使用。
 Flex-direction   flex-direction  Flex-direction負責管理Items該如何排列，它掌控著誰可以拿到主導權，能拿到主導權的有兩位人選，一位是column，另一位是row，也就是我們常講的「直行橫列」，直行是column；橫列是row。
所謂的主導權就是「主軸（main-axis）」，既然有主軸那就有「副軸（cross-axis）」。預設下主軸為row，而副軸為column。主副軸彼此的關係為「十字交叉」，若一方為主軸，則另一方就是副軸，但Flex-direction只有決定主軸是誰，副軸的功用等等再說吧。我們現來看Flex-direction，它有4個語法，分別是：
  ＊因為瀏覽器對於每個語法的定義不同，因此在Chome上看到的flex-direction: column、flex-direction: column-reverse是會爆出框框的；而在Safari上看到的是塞好塞滿。不過兩者皆是把物件塞在同一排，即便有定義好Items的寬高，但在空間不夠時是會壓縮它們的喔！
 咦咦咦！？我不要裡面的東西變形啦！！該怎麼解決呢？有兩個方法，第一個是減少Items，這樣空間就留出來了；第二個是加大Container的寬高。
 但～～上面講的都治標不治本，接下來就來介紹解決方案吧！
Flex-wrap   flex-direction  Flex-wrap決定了Items的排列方式，有別於前者說提到的Flex-direction，它控制物件該不該「包起來」。我們知道單就下Flex-direction只會讓items排一排站好，而且還有可能擠在一起，讓Items變形，因此Flex-wrap透過包起來的方式，將塞不下的Items換行繼續塞，而換行的方向就是根據副軸去排的喔。說了這麼多我們直接看看它到底有哪些功能：
  ＊Codepen展示中用到Flex-direction: row，其餘的排列組合就請自己去玩玩探索吧！
＊Flex-wrap: reverse，反轉的地方是指「副軸反轉」，正常的方向是由左至右，由上至下，而反轉後的方向則變成了由右至左，由下至上</description>
    </item>
    
    <item>
      <title>[教學]圖片自適應外框大小</title>
      <link>https://jameshsu0407.github.io/blog/20200914/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20200914/</guid>
      <description>前言 暑假一眨眼就過去了，回顧過去這兩個月來我也學到不少東西。七月主要改版台灣公益資訊中心的頁面，將網站改成RWD頁面並且新增一些功能。由於專案還在開發階段，因此無法公開頁面內容，請以舊版的台灣公益資訊中心做為參考。
接下來的分享主要以我在開發時遇到的困難、學習到的新東西為主。那我們就開始吧！
圖片自適應外框大小 標題取為「圖片自適應外框大小」我想一定有很多人看不懂這到底是什麼意思。簡單來說，會使用本平台的人數百百種，當他們在上架內容時若剛好有圖片，就會有以下情況：
 點擊上傳圖片 &amp;gt; 隨便丟一張覺得拍得不錯的照片 &amp;gt; 送出
 剛剛的順序看似再正常不過了，不過使用者有想過隨邊丟一張圖片這確定沒問題嗎？？
撇除照片檔案太大會影響載入速度外，另一個問題就是「照片的寬高比例」。現代人拍照通常都用手機，但是各家手機尺寸都不盡相同，若將未經裁切的照片丟上網頁，那一定會跑版&amp;hellip;
解法一：max-width: 100%, max-height: 100% 為了解決這個問題，我原本的想法是在圖片的外層包一層div，並且控制外層大小及照片的排列方式。若照片比例與外框比例不符，它就會等比例縮在外框裡。
 ＊圖片的src=&amp;quot;...&amp;quot;是在圖片地址，你可以換張圖片試試
 ＊html、body是為了排版用
＊主要看.pic跟.pic img那邊，外層先固定好大小，並使用flex排版，讓裡面的內容能夠水平置中及垂直置中；內層的圖片分別在最大寬度、最大高度指定為100%，意思為寬高最大就是100%，若圖片的寬度大於高度，則寬度就是100%，而高度就依照比例去計算，反之亦然
 解法二：object-fit 後來發現另一個更厲害的css內建語法，他叫做object-fit，若要以我剛剛的範例來說，它的語法就是object-fit: contain。
  ＊使用object-fit就只要在圖片上加上語法，並且列出想要的寬高就可以了
 眼尖的人可能會發現，它的語法大致跟background-size一樣，所以它同樣有好幾種顯示方式：
 fill：為預設值，強制讓圖片變形成外框的寬高。（很醜誒哈哈哈哈 contain：按照圖片等比例縮放塞入外框內。 cover：填滿外框，超出外框的部分會被裁切掉。 none：不做任何調整。（請問我要用你幹嘛？？ scale-down：取決於圖片與外框的大小。若外框小於圖片就用contain；若外框大於圖片就用none。  另外他還有個好朋友叫做object-position，可以理解為圖片在外框中的擺放位置，預設是在正中間。他們兩個可以互相搭配使用，說不定能擦出什麼火花（？？
  object-fit、object-position瀏覽器支援程度  BTW，剛剛講的object-fit、object-position並不支援IE喔，不過現在應該很少人在用IE了吧！
結語 其實還有很多種方式可以達成圖片自適應外框大小，若你有新的作法與想法，歡迎在下方留言喔！</description>
    </item>
    
  </channel>
</rss>
