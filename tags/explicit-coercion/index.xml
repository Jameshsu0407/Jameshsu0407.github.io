<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>explicit coercion on 米米的部落格</title>
    <link>https://jameshsu0407.github.io/tags/explicit-coercion/</link>
    <description>Recent content in explicit coercion on 米米的部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sat, 30 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jameshsu0407.github.io/tags/explicit-coercion/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[教學]何謂強制轉型、以及如何作到轉換型別？</title>
      <link>https://jameshsu0407.github.io/blog/20211030_explicit-coercion_implicit-coercion/</link>
      <pubDate>Sat, 30 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://jameshsu0407.github.io/blog/20211030_explicit-coercion_implicit-coercion/</guid>
      <description>前言 相信大家在剛學習JS的時候一定會遇到 轉型（coercion） 的問題，像是：
 請問每一行a的值為何呢？？
我想很多人一定會把它拿去console.log()裡面查詢吧～
JS會很貼心的（有夠雞婆）幫我們轉換型別，其中有分「顯性轉型（explicit coercion）」與「隱性轉型（implicit coercion）」，前者規規矩矩，你叫它轉型它才轉型；後者像一個死屁孩一樣會自動轉型，而且你還可能猜不透它會怎麼轉！！！
本次就來了解到底轉型是怎麼一回事ㄅ～
 目錄：
 顯性轉型與隱性轉型 顯性轉型  轉型為布林型別：Boolean() 轉型為字串型別：toString()、String() 轉型為數值型別：Number()、parseInt()、parseFloat()   隱性轉型  轉換為布林型別：其實都是看truthy跟falsy值 轉換為字串型別：使用加號 轉換為數值型別：可以使用加號，但是小心使用     顯性轉型與隱性轉型 剛剛前面有提過強制轉型分兩種：
 顯性轉型（explicit coercion）：透過人工的方式，以函式的方法轉換值的型別。 隱性轉型（implicit coercion）：看到兩個不同型別的值就會自動判斷，把值轉換為相同型別，再做運算。   不管是顯性轉型或是隱性轉型，它們轉出來的型別就只會有布林值（boolean）字串（string）以及數字（number）這三種。
顯性轉型 透過明確的JS函式方法來轉換變數的型別，對應的函式方法分別有：
 轉換為布林型別：Boolean()。 轉換為字串型別：toString()、String()。 轉換為數值型別：Number()、parseInt()、parseFloat()。  這裡有個觀念要先澄清，變數若要轉換型別，原先的屬性下就有個類似轉換為其他型別的「方法」，因此呼叫這組方法便能轉換成其它型別。
 大家可以執行上面的程式碼，你會發現a有好幾種函式，接著可以展開[[Prototype]]，你會發現toString方法就在這裡。這就是為什麼每次在官方文件上找方法會看到像Number.prototype.toString()一樣長的原因。
  可用函式  由於這牽涉到「物件原型」相互繼承的觀念，在這裡就不多做說明了，有興趣的朋友可以參考官方文件。
轉型為布林型別：Boolean() 還記得前幾篇的[教學]UNDEFINED與NULL的比較曾提到過truth值與falsy值嗎？在這裡也需要用到喔～
    truthy狀態 falsy狀態     布林值（Boolean） true false   字串（string） 除了空字串以外的字串 空字串   數字（number） 除了0之外的任意值 0   null、undefined 不可能 永遠   任何物件，包含{}、[] 永遠 不可能    接下來到了看圖說故事的時間，顯示為truthy就為true；falthy就歸類為false，就是這麼簡單！</description>
    </item>
    
  </channel>
</rss>
